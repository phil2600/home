# "-*- sh -*-"
##
## .zshrc_functions for zsh in /home/phil
##
## Based on 5 years of hardcoding
## Thanks to arkanosis@gmail.com
## Made by Philippe FAURE
## Login   <faure_p@epita.fr>
##
## Started on  Sat Mar 11 02:42:09 2006 Philippe FAURE
## Last update Mon Dec 06 23:30:22 2010 Philippe FAURE
##

##                                  Summary                                  ##
#                                   -------                                   #
#       backup_and_edit		Create backup
#	bk			Create a timed backup
#	ur			unrar on nice19
#	tempwatch		Watch temperature
#	viewlatex		LaTeX compile
#	removeallspaces		Remove spaces in filenames
#	uptodate		Keep a sniffed site up2date
#	mkcd			mkdir && cd
#	top_process_running	List of the top process running
#	psg			ps grep
#	cl			cd && ls
#	disassemble		Display ASM code from C src
#	regcheck		Check a regexp
#	newFiles		Files modified within the last $1 days
#	status			Display information about system
#	cp_dir_struct		Copy a directory structure
#	lastuse			Nb of cnx by users
#	lsTree			Greenpeace ls
#	lsOctal			Noob ls
#	epoch2real		Gimme human readable date Linus
#	topmax			Display dir size ASC
#	topten			Display 10 dir size ASC
#	lm			ls more
#	mntOnRam		Mount tmp dir on RAM
#	dispHeaderInfos		Display headers infos from C src
#	dispEnvVar		Given process env information
#	graphCnx		Graph cnx foreach hosts
#	dispErrorsOnSSH		Display login's error
#	fibo                    Fibo Loves Awk
#	c			7z Compressor
#	x			Universal extractor
#	t			Universal listing
###############################################################################


#############
# FUNCTIONS #
#############

# Create backup (.orig file) and open $EDITOR
backup_and_edit()
{
    if [ $# -ne 1 ]; then
        echo 'What?'
        return 1
    fi
    [[ -r $1 && -f $1 ]] || {
        echo "${0##*/}: $1: no access to that file." >&2
        return 1
    }
    [ ! -r $1.orig ] && cp $1{,.orig}
    $EDITOR $1
}

# Create a timed backup for a given file
bk()      { cp -b ${1} ${1}_`date --iso-8601=m` }

# unrar with nice 19
ur()
{
    if [ "$#" -eq 0 ]; then
        nice -n 19 unrar x *02.rar || nice -n 19 unrar x *.r01
    else
        nice -n 19 unrar x $@
    fi
}

#
tempwatch()
{
    while : ; do
        date "+%H:%M:%S $(sysctl hw.sensors.9|awk '{print $3}')"
        sleep 60
    done
}

# Compile with LaTeX and open the file
viewlatex()
{
    doc=${1%%.tex}
    latex $doc.tex && latex $doc.tex && xdvi $doc.pdf
    rm -f $doc.(dvi|aux|log|toc)
}

# Remove spaces in filenames
removeallspaces()
{
    find . -maxdepth 1 ! -name .| while read name; do
    noname=${name##*/}
    ext=${noname##*.}
    [[ $noname == ${noname// /} ]] && continue
    if [[ $ext == $noname ]]; then
        namecap=${(C)noname}
    else
        noname=${noname%.*}
        namecap=${(C)noname}.$ext
    fi
    namewos=${namecap// /}
    [[ $namewos != $noname ]] &&
    [[ $namecap != $namewos ]] &&
    mv -i $name $namewos
    done
}

#
uptodate()
{
    wget --no-remove-listing $1 && cat .listing && rm .listing index.html
}

# mkdir & cd
mkcd()
{
    test $# -gt 0 || {
	echo 'Usage: mkcd [args] dir (see man mkdir)' >&2
	return 1
    }
    local i=0
    local dir='' # last argument = target directory
    while [ $i -lt $# ]; do
	dir="$1"
	shift
	set dummy "$@" "$dir"
	shift
	i=$((i+1))
    done
    test -d "$dir" || mkdir "$@"
    test -d "$dir" || {
	echo "mkcd: Cannot create directory $dir"
	return 1
    }
    cd "$dir"
}

# List top process runnning
top_process_running()
{
    lsof | awk '{print $1}' | sort | uniq -c | sort -rn | head
}

# ps grep
psg () { ps auxwww | egrep "$1|PID" | grep -v grep }


# cd && ls
cl()      { cd $1 && ls -a }

# Display ASM code prefixed by the C code of the program
disassemble(){ gcc -pipe -S -o - -O -g $* | as -aldh -o /dev/null }

# Test a RegExp
#   zsh with perl-regex - use it e.g. via:
#     regcheck '\s\d\.\d{3}\.\d{3} Euro' ' 1.000.000 Euro'
regcheck() {
    zmodload -i zsh/pcre
    pcre_compile $1 && \
	pcre_match $2 && echo "regex matches" || echo "regex does not match"
}

# list files which have been modified within the last x days
newFiles() { print -l *(m-$1) }

# Print a short status of the user
status() {
    print ""
    print "Date..: "$(date "+%Y-%m-%d %H:%M:%S")""
    print "Shell.: Zsh $ZSH_VERSION (PID = $$, $SHLVL nests)"
    print "Term..: $TTY ($TERM), $BAUD bauds, $COLUMNS x $LINES cars"
    print "Login.: $LOGNAME (UID = $EUID) on $HOST"
    print "System: $(cat /etc/[A-Za-z]*[_-][rv]e[lr]*)"
    print "Uptime:$(uptime)"
    print ""
}

# Copy a directory structure
cp_dir_struct() {
    find * -type d -exec mkdir "$1"\{\} \;
}

# Number of cnx by users
lastuse() {
    last  | grep -v "^$" | awk '{ print $1 }' | sort -nr | uniq -c
}

# ls with tree formating
lsTree() {
    ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
}

# ls with octal display
lsOctal() {
    ls -l | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/)*2^(8-i));if(k)printf("%0o ",k);print}'
}

## shitty fct
give_random_pie()
{
    fB_src="/home/phil/utils/freeB_machines"
    fB_nb=$(cat $fB_src | wc -l)
    rdm_host_nb=$[ ( $RANDOM % ${fB_nb} ) ]
    rdm_host=$(cat ${fB_src} | head -n $rdm_host_nb |tail -1)
    echo "$rdm_host"
}
cpie()
{
    host=`give_random_pie`
    echo "ssh on $host"

    ssh faure_p@ssh.epita.fr -t ssh $host
}
cass()
{
    ssh faure_p@ssh.epita.fr -t ssh acu.epita.fr
}

# Convert epoch date to a human readable date
epoch2real(){
    perl -le 'print scalar localtime ${1}'
}

# display dir size ASC
topmax(){
    du --max-depth=1 | sort -r -n | awk '{split("k m g",v); s=1; while($1>1024){$1/=1024; s++} print int($1)" "v[s]"\t"$2}'
}

# display dir size ASC | head
topten(){
    topmax | head -10
}

sr()
{
    ssh root@${1}
}
runsr(){
    for i in apl sh lisp caml ruby ada php java asp; echo $i && ssh root@${i} -t $1 && echo
}

# test if netsoul is running on clients
test_ns(){
    {
	for i in apl sh lisp caml ruby ada php java asp; \
	    echo $i && \
	    ssh root@${i} -t 'echo -n "local: " && \
who | grep -v pts | cut -d" " -f1 | sort && echo -n "netsoul: " && \
netstat -lapute --inet | grep ns | grep netsoul | sed "s/ESTABLISHED//" |tr -s " " | cut -d" " -f6' && \
	    echo
    } 2> /dev/null
}

# ls more
lm() { ls -la "$@" | more}

# Mount a temporary ram partition
mntOnRam() {
    if [ $# -ne 2 ]; then
	echo "Usage: mountPoint size"
	return 1
    fi
    sudo mount -t tmpfs tmpfs "$1" -o size=$2m
}

# display typedefs, structs, unions and functions provided by a header file
dispHeaderInfos() {
    cpp "$i" | grep -v '^#' | grep -v '^$' | less
}

# Given process ID print its environment variables
dispEnvVar() {
    sudo sed 's/\o0/\n/g' /proc/$1/environ
}


# Graph of connections for each hosts.
graphCnx() {
    netstat -an | grep ESTABLISHED | awk '{print $5}' | awk -F: '{print $1}' | sort | uniq -c | awk '{ printf("%s\t%s\t",$2,$1) ; for (i = 0; i < $1; i++) {printf("*")}; print "" }'
}

# Displays the attempted user name, ip address, and time of SSH failed logins on Debian machines
dispErrorsOnSSH() {
awk '/sshd/ && /Failed/ {gsub(/invalid user/,""); printf "%-12s %-16s %s-%s-%s\n", $9, $11, $1, $2, $3}' /var/log/auth.log
}


# Display fibonacci numbers
fibo() {
    seq 50| awk 'BEGIN {a=1; b=1} {print a; c=a+b; a=b; b=c}'
}

function c()
{
    if ! ((#)); then
	echo 'Usage: c <directory> [directory [...]]' >&2
	return 1
    fi

    for arg; do
	print "\e[32mCompressing \e[1m$arg\e[0;32m (\e[1m7-Zip\e[0;32m compressed archive)...\e[0m"
	7za a `echo $arg | sed 's_/\?$_.7z_'` $arg
    done
}

function x()
{
    # Extracteur universel v1.3
    # (C) 2008-2009 Arkanosis
    # arkanosis@gmail.com / roquet_j@epita.fr
    for arg; do
	case $arg in
	    *.(tar.bz2|tbz2))
                if ((`tar tvjf $arg | sed 's@.*[ \t]\\([^ \t/]\+\\)\\(/.*\\)\?$@\1@' | sort -u | wc -l` > 1)); then
		    echo 'No root directory. Create one?'
		    read y
		    if [[ $y = (y|Y) ]]; then
			dir=`echo $arg | sed 's/\.\(tbz2\|tar\.bz2\)$//'`
			mkdir $dir
			pushd $dir
			echo 'n' | x ../$arg
			popd
			continue
		    fi
		fi

		print "\e[32mExtracting \e[1m$arg\e[0;32m (\e[1mBZip2\e[0;32m compressed archive)...\e[0m"
		tar xvjf $arg
	    ;;
	    *.(tar.gz|tgz))
                if ((`tar tvzf $arg | sed 's@.*[ \t]\\([^ \t/]\+\\)\\(/.*\\)\?$@\1@' | sort -u | wc -l` > 1)); then
		    echo 'No root directory. Create one?'
		    read y
		    if [[ $y = (y|Y) ]]; then
			dir=`echo $arg | sed 's/\.\(tgz\|tar\.gz\)$//'`
			mkdir $dir
			pushd $dir
			echo 'n' | x ../$arg
			popd
			continue
		    fi
		fi

		print "\e[32mExtracting \e[1m$arg\e[0;32m (\e[1mGZip\e[0;32m compressed archive)...\e[0m"
		tar xvzf $arg
	    ;;
	    *.(tar.xz|txz))
	        print "\e[32mExtracting \e[1m$arg\e[0;32m (\e[1mXz\e[0;32m compressed archive)...\e[0m"
		7za x $arg

		tarball=`echo $arg | sed 's/\.xz$//'`

                if ((`tar tvf $tarball | sed 's@.*[ \t]\\([^ \t/]\+\\)\\(/.*\\)\?$@\1@' | sort -u | wc -l` > 1)); then
		    echo 'No root directory. Create one?'
		    read y
		    if [[ $y = (y|Y) ]]; then
			dir=`echo $tarball | sed 's/\.tar$//'`
			mkdir $dir
			pushd $dir
			echo 'n' | x ../$tarball
			popd
			continue
		    fi
		fi
		tar xvf $tarball
		rm $tarball
	    ;;
	    *.7z)
	        print "\e[32mExtracting \e[1m$arg\e[0;32m (\e[1m7-Zip\e[0;32m compressed archive)...\e[0m"
		7za x $arg
	    ;;
	    *.xz)
	        print "\e[32mExtracting \e[1m$arg\e[0;32m (\e[1mXz\e[0;32m compressed file)...\e[0m"
		7za x $arg
	    ;;
	    *.bz2)
	        print "\e[32mExtracting \e[1m$arg\e[0;32m (\e[1mBZip2\e[0;32m compressed file)...\e[0m"
		bunzip2 $arg
	    ;;
	    *.gz)
	        print "\e[32mExtracting \e[1m$arg\e[0;32m (\e[1mGZip\e[0;32m compressed file)...\e[0m"
		gunzip $arg
	    ;;
	    *.(zip|jar))
                if ((`unzip -l $arg | tail -n +4 | head -n -2 | sed 's@[ \t]*[0-9]\+[ \t]\+[0-1][0-9]-[0-3][0-9]-[0-9][0-9][ \t]\+[0-2][0-9]:[0-6][0-9][ \t]\+\\([^ \t]\+\\)@\1@' | sort -u | wc -l` > 1)); then
		    echo 'No root directory. Create one?'
		    read y
		    if [[ $y = (y|Y) ]]; then
			dir=`echo $arg | sed 's/\.\(zip\|jar\)$//'`
			mkdir $dir
			pushd $dir
			echo 'n' | x ../$arg
			popd
			continue
		    fi
		fi

	        print "\e[32mExtracting \e[1m$arg\e[0;32m (\e[1mZip\e[0;32m compressed archive)...\e[0m"
		unzip $arg
	    ;;
	    *.Z)
	        print "\e[32mExtracting \e[1m$arg\e[0;32m (\e[1mZ\e[0;32m compressed file)...\e[0m"
		uncompress $arg
	    ;;
	    *.docx)
	        print "\e[32mExtracting \e[1m$arg\e[0;32m (\e[1mOpenXML\e[0;32m text document)...\e[0m"
		unzip $arg
	    ;;
	    *.od(g|p|s|t))
	        print "\e[32mExtracting \e[1m$arg\e[0;32m (\e[1mOpenDocument\e[0;32m document)...\e[0m"
		unzip $arg
	    ;;
	    *.tar)
                if ((`tar tvf $arg | sed 's@.*[ \t]\\([^ \t/]\+\\)\\(/.*\\)\?$@\1@' | sort -u | wc -l` > 1)); then
		    echo 'No root directory. Create one?'
		    read y
		    if [[ $y = (y|Y) ]]; then
			dir=`echo $arg | sed 's/\.tar$//'`
			mkdir $dir
			pushd $dir
			echo 'n' | x ../$arg
			popd
			continue
		    fi
		fi

		print "\e[32mExtracting \e[1m$arg\e[0;32m (\e[1mNon-compressed\e[0;32m archive)...\e[0m"
		tar xvf $arg
	    ;;
	    *.deb)
	        print "\e[32mExtracting \e[1m$arg\e[0;32m (\e[1mDebian\e[0;32m package)...\e[0m"
		dpkg-deb -x $arg `echo $arg | sed 's/\.deb$//'`
	    ;;
	    *.xpi)
	        print "\e[32mExtracting \e[1m$arg\e[0;32m (\e[1mxpi\e[0;32m plugin)...\e[0m"
		unzip $arg
	    ;;
	    *.rar)
	        print "\e[32mExtracting \e[1m$arg\e[0;32m (\e[1mRar\e[0;32m compressed archive)...\e[0m"
		unrar e $arg
	    ;;
	    *)
	        print "\e[91mCannot extract \e[1m$arg\e[0;31m (\e[1mUnknown\e[0;31m archive type)...\e[0m"
	    ;;
        esac
    done
}

function t()
{
    # Listeur universel v1.3
    # (C) 2008-2009 Arkanosis
    # arkanosis@gmail.com / roquet_j@epita.fr
    for arg; do
	case $arg in
	    *.(tar.bz2|tbz2))
                print "\e[32mListing \e[1m$arg\e[0;32m (\e[1mBZip2\e[0;32m compressed archive)...\e[0m"
		tar tvjf $arg
	    ;;
	    *.(tar.gz|tgz))
	        print "\e[32mListing \e[1m$arg\e[0;32m (\e[1mGZip\e[0;32m compressed archive)...\e[0m"
		tar tvzf $arg
	    ;;
	    *.(tar.xz|txz))
	        print "\e[32mExtracting \e[1m$arg\e[0;32m (\e[1mXz\e[0;32m compressed archive)...\e[0m"
		7za x $arg
		tarball=`echo $arg | sed 's/\.xz$//'`
		tar tvf $tarball
		rm $tarball
	    ;;
	    *.7z)
	        print "\e[32mListing \e[1m$arg\e[0;32m (\e[1m7-Zip\e[0;32m compressed archive)...\e[0m"
		7za l $arg
	    ;;
	    *.bz2)
	        print "\e[32mListing \e[1m$arg\e[0;32m (\e[1mBZip2\e[0;32m compressed file)...\e[0m"
		echo $arg | sed -e 's/.bz2$//'
	    ;;
	    *.gz)
	        print "\e[32mListing \e[1m$arg\e[0;32m (\e[1mGZip\e[0;32m compressed file)...\e[0m"
		echo $arg | sed -e 's/.gz$//'
	    ;;
	    *.(zip|jar))
	        print "\e[32mListing \e[1m$arg\e[0;32m (\e[1mZip\e[0;32m compressed archive)...\e[0m"
		unzip -l $arg
	    ;;
	    *.docx)
	        print "\e[32mListing \e[1m$arg\e[0;32m (\e[1mOpenXML\e[0;32m text document)...\e[0m"
		unzip -l $arg
	    ;;
	    *.od(g|p|s|t))
	        print "\e[32mListing \e[1m$arg\e[0;32m (\e[1mOpenDocument\e[0;32m document)...\e[0m"
		unzip -l $arg
	    ;;
	    *.tar)
	        print "\e[32mListing \e[1m$arg\e[0;32m (\e[1mNon-compressed\e[0;32m archive)...\e[0m"
		tar tvf $arg
	    ;;
	    *.deb)
	        print "\e[32mListing \e[1m$arg\e[0;32m (\e[1mDebian\e[0;32m package)...\e[0m"
		echo 'Not implemented'
	    ;;
	    *.xpi)
	        print "\e[32mListing \e[1m$arg\e[0;32m (\e[1mxpi\e[0;32m plugin)...\e[0m"
		unzip -l $arg
	    ;;
	    *.rar)
	        print "\e[32mListing \e[1m$arg\e[0;32m (\e[1mRar\e[0;32m compressed archive)...\e[0m"
		unrar l $arg
	    ;;
	    *)
	        print "\e[91mCannot list \e[1m$arg\e[0;31m (\e[1mUnknown\e[0;31m archive type)...\e[0m"
	    ;;
	esac
    done
}

###########
#  ALIAS  #
###########
alias gmake="gmake --no-print-directory"
alias rm='rm -i'

alias sl="ssh root@localhost"
alias zl="xscreensaver -nosplash & xscreensaver-command -lock"
alias news="emacs -f gnus"

alias web="firefox &!"
alias gh="echo 'corrected gh to fg'; fg"
alias diff='diff -u'
alias grep='grep --color=auto'
alias finger='MALLOC_OPTIONS='' finger'

alias psa='ps aux'
alias psu='ps  ux'

alias df='df -P'
alias dfk='df -PTak'
alias dfm='df -PTam'
alias dfh='df -PTah'
alias dfi='df -PTai'

alias ds='dig +noauthority +noadditional +noqr +nostats +noidentify +nocmd +noquestion +nocomments'
alias firefox_destroyer='ps aux|grep [f]irefox|awk '{ print $2}'|xargs kill -9'

alias filldisk='watch -n 1 df'
alias topfiles="watch --differences -n 5 'df; ls -FlAt;'"
alias toptenprocess='ps aux | sort -nk +4 | tail'

# Xterm resizing-fu.
# Based on http://svn.kitenet.net/trunk/home-full/.zshrc?rev=11710&view=log (by Joey Hess)
alias hide='echo -en "\033]50;nil2\007"'
alias tiny='echo -en "\033]50;-misc-fixed-medium-r-normal-*-*-80-*-*-c-*-iso8859-15\007"'
alias small='echo -en "\033]50;6x10\007"'
alias medium='echo -en "\033]50;-misc-fixed-medium-r-normal--13-120-75-75-c-80-iso8859-15\007"'
alias default='echo -e "\033]50;-misc-fixed-medium-r-normal-*-*-140-*-*-c-*-iso8859-15\007"'
alias large='echo -en "\033]50;-misc-fixed-medium-r-normal-*-*-150-*-*-c-*-iso8859-15\007"'
alias huge='echo -en "\033]50;-misc-fixed-medium-r-normal-*-*-210-*-*-c-*-iso8859-15\007"'
alias smartfont='echo -en "\033]50;-artwiz-smoothansi-*-*-*-*-*-*-*-*-*-*-*-*\007"'
alias semifont='echo -en "\033]50;-misc-fixed-medium-r-semicondensed-*-*-120-*-*-*-*-iso8859-15\007"'

########
## LS ##
alias l="$lsbin $LS_OPTIONS"
alias ls="$lsbin $LS_OPTIONS"
alias ll="$lsbin $LS_OPTIONS -l"
alias la="$lsbin $LS_OPTIONS -la"

# List only directories and symbolic
# links that point to directories
alias lsd='ls -ld *(-/DN)'

# List only file beginning with "."
alias lsa='ls -ld .*'
alias lstoday='ls *(m-1)'
alias lsempty='ls -ld **/*(/^F)'

# world-{readable,writable,executable} files
alias lsw='ls -ld *(R,W,X.^ND/)'
# display the biggest files
alias lsbig="ls -flh *(.OL[1,10])"
# only show directories
alias lsd='ls -d *(/)'
# only show empty directories
alias lse='ls -d *(/^F)'
# display the newest files
alias lsnew="ls -rl *(D.om[1,10])"
# display the oldest files
alias lsold="ls -rtlh *(D.om[1,10])"
# display the smallest files
alias lssmall="ls -Srl *(.oL[1,10])"


## BROKEN
###########
#
#cdiff()   { diff -crd "$*" | egrep -v "^Only in |^Binary files " }

# Display a block of text with AWK
# awk '/start_pattern/,/stop_pattern/' file.txt
## dmidecode | awk '/Battery/,/^$/'backup_and_edit()
